Прочитать чистый код
java code conv (!!!) не писать лонг через маленькую l
операции над примитивными типами
приоритет операций - будет на тесте
ряд расширяющих преобразований
byte -> short -> int -> long -> float -> double
как сравнить два double
к макс byte добавить 1

сужающее преобразование (потеря точности и искажение возможно)
проверить примеры

компилировать из любого каталога
разобраться с кодом

ДЗ
==========================================
на основе кода принять Hello проверить, прорка должна быть отд. метод. если hello - отправить на модель, тоже самое с java
создать предложение hello пробел java
введите hello
введите java

если правильно out -> hello java
все по MVC
================

Idea community - Spring?

презентация
лекция
доп литература

как получить idea ultimate

MVC

user

1) View
2) Controller (проверка данных на правильность и целостность)
2) Model (бизнес логика)
3) ORM + DB

некорректные данные - худший случай

main не суперкласс - перелача управления в контроллер

никаких строк в модели и контроллере
sysout кроме view нигде
отладка только через тесты




байтовая маска - гугл

===============================
2.


системы счисления шестн, 8ричная (до16)
с 2й - в 8чную, в 16чную и обратно
умение сформулировать свои мысли кратно и по теме - собес

Массивы

new выделяет память
no hardcode

рефакторинг - улучшение читаемости кода

математика

guide for technical development

!!mathematics for cs

за операции с нулем отдельный сопроцессор - быстрей
обход элементой с конца массива быстрей

mockup

CI CD

JUnit4

notepad -> ide

сортировка пузырьком и вообще сортировки

что нужно для собеза

алгоритмы и структуры данных книги, лекториум

порядок возрастания сложности
программа минимально сложности

изобразить сортировку

пр_мас_сокр в блокноте


*******************************************************************************************

String, StringBuilder, StringBuffer

null - специальное значение, на которое может ссылаться любая ссылка

какой GOF pattern в стринг пуле

        String s1 = "123";
        String s2 = "12" + "3"; //прекомпиляция преобразует в "123"
        System.out.println(s1 == s2); //true

split()
trim()

лексикографический порядок - ??

поиграться со сравнением строк через compareTo

как работает StringBuilder??
буферная память (1,5 размера текста + 1)

при уменьшении текста в буфере, буфер не будет автоматом уменьшаться, нужно вызывать для этого trimToSize()

patter + compite - от 3х и выше раз сравнения

оракл - регекс
=========================== задание
все даннык собрать, потом на модель


проверить кеширование Integer


google рекомендации по коммитам

**********************************************************************************************

ООП - парадигма программирования - все объекты

smus sergey

c введением ооп код лучше отражает взаимодействие объектов реального мира с необходимой долей детализации
геттеры и сеттеры не тестят

энкапсуляция - сокрытие данных для возможности дальнейшего изменения в будущем

выделение базового класса, на его базе создание иерархии классов
Полиморфизм - возможность вызывать методы наследников используя ссылку базового класса 
определение алгоритма
createChildClass -> создать классы
научиться создавать объекты

проверки
валидация данных - в контроллере, все что относится к бл - в модели

минус ооп - потеря особенностей наследника при полиморфизме
опреление массива

parent -> child
       -> child -> grandchild
			
			 Inc
			 Ext
	   OL OverR P Generics
			 Abst
			 
samle

прописать encoding - UTF-8
блинов - java интернационализация строк

file -> new -> resource bundle
properties - регулярки
!!! Task!			 


**********************************************************************************************

class Object

вершина иерархии
может указываеть на любой объект
===================
проверить что будет если не переопределить toString() в объекте
===================

oracle - много фантомных расчитных алгоритмов
hashcode вычисляется в фоне, потому по нему сравнивать быстрей чем вызывать equals 

хэш - (первый элемент + второй * простое число + b) * ПЧ + С

СБ контракт между equals hash - должны считаться по одним и тем же параметрам

!! соглашение по equals 

id не брать что-то внешнее в качестве


написать equals по данным полям --- запомнить
сравнине с собой, с нулом, соравнение по типу (instanceof, если нужны наследники, если нет то getClass) -> поэлементрное сравнение

поиграться с clone

почему cloneNotSupported
примеры на equals and hc and clone

СБ!!! immutable object - заучить "как создать immutable object" из презентации

ДЗ===================
создать immutable object и изменить рефлекшном

как сравнивать enum
ordidal

грузовые 

**********************************************************************************************

04.12.19

Философия исключений

что такое исключительная ситуация
есть основной алгоритм
возникновение ситуаций, которые приводят к нарушению выполнения данного алгоритма
любые возникающие события, которые не дают продолжать основную канву выполнения программы
любой try-catch ресурсоемок
любой отход от тз - ответственность
обозначить проблему по переписке
озвучить на созвоне, статус-встрече
задача разработчика - безбаговый код, который работает всегда и выполняет четко поставленную задачу
стоппер - исключительная ситуация в работе не по вине другого человека, когда нельзя продолжить работу
блоккер - ... по вине другого

для устрочивости в случае исключительной ситуации возвращают некоректные данные 
Throwable - единственный класс, который может остановить естественный порядок выполнения программы
для вставки записи в базу, не проверять наличие (в следующей же транзакции такая же запись может быть добавлена),
 а попытаться вставить и обработать исключение


в try - минимальное количество кода (try вызывает безопасный режим, который работает медленно)
если исключения можно разделить на несколько трай - разделить
недопускать возникновения одних и тех же исключений в разных местах в одном коде

!!!знать иерархию исключений
Error - после возникновения нельзя гарантировать сохранность данных и продолжать работу

finally обрабатывается всегда, кроме случаем убивающих Jvm или подвешивающих программу
в трай не return, не обрабатывать новые исключения
!! Closable, autoclosable ---посмотреть. 
autoclosable -- кто реализовует, тот и может использоваться в try-with-resources

несколько исключение в одном catch -- только одного уровня

на понедельник проработать эксепшны головачева (первые две ссылки в презентации) набрать код и выложить на гит
============
две крайности принятия решений
где ловить sql exception
====================
метод вводящий логин
взять готовый проект регистрационной формы

**********************************************************************************************
Classloader - коды методов + статики
сколько потоков - столько стеков
что такое null????

**********************************************************************************************

project feedback
не должно быть проверок в модели
for заменить на стримы
не не использовать double
в методе не должно быть создания объектов
stream

!!vertex сортировки
все проверки, валидации в контроллере -> в модели только бизнес логика
служебный метод всегда что-то принимает и что-то возвращает - тогда можно протестировать

**********************************************************************************************
11.12.19

хороший тон - работать на одном уровне абстракции

POJO. классы без поведения
в объекте только данные, конструктор, геттеры-сеттеры, equals, toString, builder

!!ПОРОЖДАЮШИЕ ПАТТЕРНЫ (Singleton)

вопрос по теории: определение + применение

при изменении методов в сложной иерархии можно поломать существующий функционал

Spring Boot initializer

правила разделения эмиссии

вместо иерархии сборки объектов

dependency injection
ооп - прежде чем что-то использовать, это что-то должно быть созданно

static и default методы в интерфейсах

все взаимодействия с объектами происходят через интерфейс

посмотреть rt2 - проверить дз

Objects.requireNonNull

lombok
видео в блоке 7
видео алишев Spring уроки 1-7

**********************************************************************************************

13.12.19

============================================================================================
создать в спринг приложении  entity user


переписать задание на экспепшн, проверка в модели
xml, аннотации разобраться

кислин

!!!!!!!!!!видео в блоке 7 на 12 минут по спрингу

посмотреть LocalData

разобрать пример с докторами

!!! переписать первую таску в стиле видео 7 (можно на спринге) через сборку
переписать розетку на 5 штук
blockj8 видео лямбда выражения
java 8 учебник vortex - прочитать! все ссылки в файле!!
дописать в анки внутренние классы

Создать юзера в спринг программе
презентация исключения

**********************************************************************************************

16.12.19

переписать view вместо instanceof через map filter 

!!!!ПАТТЕРНЫ
СТРУКТУРНЫЕ
ФАСАД, 


ДЗ ---- СТРИМЫ 

МАССИВ, лист - интстрим, стрим
2. pair

динамический массив имеет выиграш в производительности только если добавлять элемент в конец массива

в динамическом массиве есть буферная память. при заполнении свободного места массива на 75 %
создается новый массив с новым буфером
capacity - данные в массиве + свободное месте == 1.5 + 1
current logic size * 1.5 + 1
адрес массива в память + размер элемента * n - 1

поиск в хеш таблице
хештаблицу нельзя исп для долгосрочного хранения данных
в пределах одного метода


двоичное дерево - поиск по диапазону

хештаблицы и деревья двоичные применяются в индексировании баз данных
алгоритм балансировки красно-черное дерево


найти и выучить LocalDataTime
выучить новые методы для мап из java 8
разобраться пишем лист.док

выучить структуру листа (связанный и обычный) методы

*****************************************************************************************************************************

Сделать HashSet и TreeSet ------ общая внутренняя структура  на ПТ

Андрей Родионов	

неизвестные дженерики ютруб

иерархия коллекций - знать

Iterable -- Iterator
    |
Collections

разобраться с внутренней структорой Map

старый код покрывается тестами, пишется новый и доводится до состояния, чтобы проходить все тесты

как ведут себя коллекции с null

разобраться со структурами всех коллекций

абстрактные реализации интерфейсов коллекций

методы интерфейса коллекций

unsupportedOperationException 
Concurrent modification exception

sublist - подсписок связанный с изначальной коллекцией

задание в Написать коллекцию


Потоки ввода вывода
всегда должны закрываться - потенциальная утечка памяти

flush - записывается буффер

паттерн в BufferedReader
transient поля записываются значениями по умолчанию
RandomAccessFile

GrabDuck -- Spring на практике
lets code









